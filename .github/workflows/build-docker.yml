name: Build Docker Image

# 触发条件：每次 push 到 main 分支或推送标签
on:
  push:
    branches:
      - main


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 设置 Docker Buildx（支持多架构构建，可选）
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. 提取版本号（从 Git 标签或默认值）
      - name: Extract version
        id: extract_version
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
          fi

      # 4. 获取仓库名并转换为小写（Docker 镜像名称要求小写）
      - name: Get repository name
        id: repo_name
        run: |
          echo "repo_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | sed 's/.*\///')" >> $GITHUB_OUTPUT

      # 5. 构建 Docker 镜像
      - name: Build Docker image
        run: |
          docker build -t ${{ steps.repo_name.outputs.repo_name }}:${{ steps.extract_version.outputs.version }} -f Dockerfile .

      # 6. 保存 Docker 镜像为 tar 文件
      - name: Save Docker image
        run: |
          docker save -o ${{ steps.repo_name.outputs.repo_name }}-${{ steps.extract_version.outputs.version }}.tar ${{ steps.repo_name.outputs.repo_name }}:${{ steps.extract_version.outputs.version }}

      # 7. 上传镜像 tar 文件作为 artifact
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ steps.repo_name.outputs.repo_name }}-${{ steps.extract_version.outputs.version }}
          path: ${{ steps.repo_name.outputs.repo_name }}-${{ steps.extract_version.outputs.version }}.tar
          retention-days: 7
